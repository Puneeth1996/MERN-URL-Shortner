21 Mar 2020

Implement a URL shortening service : https://hackmd.io/vlyr-09fT1--as6wnEizOg


MongoDB 
puneeth1996trainer@gmail.com
123password





Goal 1
Implement a URL shortening service.

Basic Requirements

Shorten given long URL
Redirect to original on accessing short URL
Additional Requirements

URL Expiry
URL analytics
Custom short URLs
Front End

A Page to paste the copied URL

Logo
Menu, Becomes hamburger menu in mobile
An input the enter URL with button to shorten it
A place to show the shorten URL (copy URL as per the task requirement)
A Footer
It should be an Hybrid App.

Goal 2
Security (Optional)
Young hackers are always around and growing. They need a playground to test their toys however Instacar can’t be the target!
Lets implement a rate limiter (redis?):
A single IP should not be able to hit your app more than 100 times per min
Integration of oAuth (https://auth0.com/), JWT
Anything else you would like to do to secure your app?

Goal 3
Deployment

Awesome! Good work! Deployment time!

All your services should be in containers (docker).

Use Kubernetes to deploy the whole stack.(try it out, you might love it there is a nice tutorial https://kubernetes.io/docs/tutorials/). There are others too feel free to. But if you couldn’t do Kubernetes its okay. We get it.

Write a single deployment file for us which should do everything needed to have your app up and running. Your deployment file should work on Linux/Mac at least!
Dockerizing your app is a must

Goal 4
Happy testing!
Last but not the least, testing! You can follow TDD or FDD!
There should be a way to test the application features and functions.
Must have integration tests!
Must have unit tests!
Submit your code
Please don’t forget to write your readme file which should contain what/why your have done things in certain way! Documentation is highly appreciated!

Push the files to Git Than push the files to server and share the link to submit the assignment.







21 Mar 2020 

WHen working with testing for the api endpoints 
1. I have used Postman 
2. I have rest client from VSCode Extension and on api.http file that helps in testing the REST API Functionality.








24 March 2020


Some usefull commands when working with docker 

    docker-compose up
    docker-compose down


    docker run -it -p 3000:3000 client

    docker build -t client . 


    docker run -it -p 5000:5000 server

    docker build -t server . 



    https://linuxize.com/post/how-to-remove-docker-images-containers-volumes-and-networks/

    docker system prune
    docker system prune --volumes

    docker images
    docker container ls -a
    docker container rm cc3f2ff51cab cd20b396a061
    docker images rm f3ba977a0494 4f7f7865ecc7 ea3808863632 7610f82c9bc8
    docker container prune
    docker image ls
    docker image rm f3ba977a0494 4f7f7865ecc7 ea3808863632 7610f82c9bc8 7aef30ae6655 4defe8c37688




    https://stackoverflow.com/questions/33907835/docker-error-cannot-delete-docker-container-conflict-unable-to-remove-reposito








Steps to run the project with Docker Installed 

    1. cd into the client folder 
    2. run docker files by using the below two commands
        docker build -t client . 
        docker run -it -p 3001:3000 client

    3. Now in the home director( outside the client folder ie, come out the client folder and into the root project folder )
        docker build -t server .  
        docker run -it -p 5000:5000 server 


    