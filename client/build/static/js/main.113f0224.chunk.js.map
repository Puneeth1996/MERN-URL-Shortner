{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","myChangeHandler","event","setState","URL","target","value","mySubmitHandler","preventDefault","console","log","state","validator","isURL","require_protocol","axios","post","then","response","shortURL","data","shortUrl","error","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","eventKey","Jumbotron","fluid","Container","Form","onSubmit","this","Group","as","Row","controlId","Label","column","sm","Col","Control","type","placeholder","onChange","Button","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"+RASqBA,E,kDAEnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAGRC,gBAAkB,SAACC,GACjB,EAAKC,SAAS,CAACC,IAAKF,EAAMG,OAAOC,SALhB,EAQnBC,gBAAkB,SAACL,GACjBA,EAAMM,iBACNC,QAAQC,IAAI,sBAAwB,EAAKC,MAAMP,KAC9BQ,IAAUC,MAAM,EAAKF,MAAMP,IAAK,CAC/CU,kBAAkB,IAOlBC,IAAMC,KAAK,wCAAyC,CAClD,QAAW,EAAKL,MAAMP,MAErBa,MAAK,SAACC,GACLT,QAAQC,IAAIQ,GACZ,EAAKf,SAAS,CAACgB,SAAUD,EAASE,KAAKC,cACtC,SAACC,GACFb,QAAQC,IAAIY,MAXhB,EAAKnB,SAAS,CAACgB,SAAU,gFAb3B,EAAKR,MAAQ,CAAEP,IAAK,GAAIe,SAAU,IAFjB,E,qDAiCjB,OACE,oCACA,kBAACI,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACrD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,eACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,aAAf,YACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,YAAf,WACA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,WAAWL,GAAG,2BAC/B,kBAACI,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,UACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,kBACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,aACA,kBAACQ,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,oBAGJ,kBAACK,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIE,KAAL,CAAUP,KAAK,UAAf,cACA,kBAACK,EAAA,EAAIE,KAAL,CAAUK,SAAU,EAAGZ,KAAK,UAA5B,iBAMN,kBAACa,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAMC,SAAUC,KAAKxC,iBACnB,kBAACsC,EAAA,EAAKG,MAAN,CAAYC,GAAIC,IAAKC,UAAU,uBAC7B,kBAACN,EAAA,EAAKO,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,aAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACT,EAAA,EAAKW,QAAN,CAAcC,KAAK,MAAMC,YAAY,uCAAuCC,SAAUZ,KAAK9C,mBAE7F,kBAAC2D,EAAA,EAAD,CAAQjC,QAAQ,UAAU8B,KAAK,UAA/B,YAKJ,2BAAIV,KAAKpC,MAAMQ,SAAU,uBAAGU,KAAMkB,KAAKpC,MAAMQ,UAAW4B,KAAKpC,MAAMQ,UAAe,W,GA3EzD0C,aCGbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdC,OAAM,SAAAvD,GACLb,QAAQa,MAAMA,EAAMwD,a","file":"static/js/main.113f0224.chunk.js","sourcesContent":["import React, { Component } from 'react'\n// import logo from './logo.svg';\n// import './App.css';\n\nimport { Navbar,Nav,NavDropdown,Form,Row,Col,Jumbotron,Container,Button } from 'react-bootstrap';\nimport axios from 'axios'\nimport validator from 'validator'\n\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { URL: '', shortURL: '', };\n  }\n  myChangeHandler = (event) => {\n    this.setState({URL: event.target.value});\n  }\n\n  mySubmitHandler = (event) => {\n    event.preventDefault();\n    console.log(\"You are submitting \" + this.state.URL);\n    const validURL = validator.isURL(this.state.URL, {\n      require_protocol: true\n    })\n    if(!validURL){\n      this.setState({shortURL: \"Invalid URL Make sure to ensure the url and http(s) protocols are correct.\"});\n    }\n    else{\n      // send a POST request\n      axios.post('http://localhost:5000/api/url/shorten', {\n        \"longUrl\": this.state.URL\n      })\n        .then((response) => {\n          console.log(response);\n          this.setState({shortURL: response.data.shortUrl});\n        }, (error) => {\n          console.log(error);\n        });\n    }\n  }\n\n\n  render() {\n    return (\n      <>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Insta - Car</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#features\">Features</Nav.Link>\n            <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n            <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n          <Nav>\n            <Nav.Link href=\"#deets\">More deets</Nav.Link>\n            <Nav.Link eventKey={2} href=\"#memes\">\n              Dank memes\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Jumbotron fluid>\n        <Container>\n        <Form onSubmit={this.mySubmitHandler}>\n          <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n            <Form.Label column sm={2}>\n              Enter URL\n            </Form.Label>\n            <Col sm={8}>\n              <Form.Control type=\"url\" placeholder=\"Please Enter The Url To Be Shortened\" onChange={this.myChangeHandler} />\n            </Col>\n            <Button variant=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n          </Form.Group>\n        </Form>\n        <p>{this.state.shortURL? <a href={this.state.shortURL}>{this.state.shortURL}</a>: \"\"}</p>\n        </Container>\n      </Jumbotron>\n      \n      </>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}